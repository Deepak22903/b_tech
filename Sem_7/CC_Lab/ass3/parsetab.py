
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSrightPOWERDIVIDE EQUALS LPAREN MINUS NAME NUMBER PLUS POWER RPAREN TIMESstatement : NAME EQUALS expressionstatement : expressionexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression POWER expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAMEexpression : NAME LPAREN expression RPAREN'
    
_lr_action_items = {'NAME':([0,4,5,7,8,9,10,11,12,13,],[2,15,15,15,15,15,15,15,15,15,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,],[4,-11,10,4,4,-10,4,4,4,4,4,4,4,-8,-11,10,10,10,-3,-4,-5,-6,-7,-9,-12,]),'LPAREN':([0,2,4,5,7,8,9,10,11,12,13,15,],[5,8,5,5,5,5,5,5,5,5,5,8,]),'NUMBER':([0,4,5,7,8,9,10,11,12,13,],[6,6,6,6,6,6,6,6,6,6,]),'$end':([1,2,3,6,14,15,17,19,20,21,22,23,24,25,],[0,-11,-2,-10,-8,-11,-1,-3,-4,-5,-6,-7,-9,-12,]),'EQUALS':([2,],[7,]),'PLUS':([2,3,6,14,15,16,17,18,19,20,21,22,23,24,25,],[-11,9,-10,-8,-11,9,9,9,-3,-4,-5,-6,-7,-9,-12,]),'TIMES':([2,3,6,14,15,16,17,18,19,20,21,22,23,24,25,],[-11,11,-10,-8,-11,11,11,11,11,11,-5,-6,-7,-9,-12,]),'DIVIDE':([2,3,6,14,15,16,17,18,19,20,21,22,23,24,25,],[-11,12,-10,-8,-11,12,12,12,12,12,-5,-6,-7,-9,-12,]),'POWER':([2,3,6,14,15,16,17,18,19,20,21,22,23,24,25,],[-11,13,-10,13,-11,13,13,13,13,13,13,13,13,-9,-12,]),'RPAREN':([6,14,15,16,18,19,20,21,22,23,24,25,],[-10,-8,-11,24,25,-3,-4,-5,-6,-7,-9,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,4,5,7,8,9,10,11,12,13,],[3,14,16,17,18,19,20,21,22,23,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NAME EQUALS expression','statement',3,'p_statement_assign','scientific_calculator.py',85),
  ('statement -> expression','statement',1,'p_statement_expr','scientific_calculator.py',91),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','scientific_calculator.py',97),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','scientific_calculator.py',98),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','scientific_calculator.py',99),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','scientific_calculator.py',100),
  ('expression -> expression POWER expression','expression',3,'p_expression_binop','scientific_calculator.py',101),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','scientific_calculator.py',119),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','scientific_calculator.py',124),
  ('expression -> NUMBER','expression',1,'p_expression_number','scientific_calculator.py',129),
  ('expression -> NAME','expression',1,'p_expression_name','scientific_calculator.py',134),
  ('expression -> NAME LPAREN expression RPAREN','expression',4,'p_expression_func_call','scientific_calculator.py',150),
]
